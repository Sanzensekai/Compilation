===== STDERR =====

===== STDOUT =====

===== Terminals =====
[0]EOF [1]error [2]EQUAL [3]PLUS [4]MINUS 
[5]TIMES [6]DIVIDE [7]LPAREN [8]RPAREN [9]EOLN 
[10]NUMBER [11]ID [12]UPLUS [13]UMINUS 

===== Non terminals =====
[0]list [1]instr [2]expr 

===== Productions =====
[0] list ::= 
[1] $START ::= list EOF 
[2] list ::= list instr EOLN 
[3] instr ::= ID EQUAL expr 
[4] instr ::= expr 
[5] expr ::= expr PLUS expr 
[6] expr ::= expr MINUS expr 
[7] expr ::= expr TIMES expr 
[8] expr ::= expr DIVIDE expr 
[9] expr ::= MINUS expr 
[10] expr ::= PLUS expr 
[11] expr ::= LPAREN expr RPAREN 
[12] expr ::= NUMBER 
[13] expr ::= ID 
===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [list ::= (*) list instr EOLN , {EOF PLUS MINUS LPAREN NUMBER ID }]
  [$START ::= (*) list EOF , {EOF }]
  [list ::= (*) , {EOF PLUS MINUS LPAREN NUMBER ID }]
}
transition on list to state [1]

-------------------
lalr_state [1]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [list ::= list (*) instr EOLN , {EOF PLUS MINUS LPAREN NUMBER ID }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [$START ::= list (*) EOF , {EOF }]
  [instr ::= (*) expr , {EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [instr ::= (*) ID EQUAL expr , {EOLN }]
}
transition on EOF to state [9]
transition on LPAREN to state [8]
transition on expr to state [7]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on instr to state [3]
transition on ID to state [2]

-------------------
lalr_state [2]: {
  [expr ::= ID (*) , {PLUS MINUS TIMES DIVIDE EOLN }]
  [instr ::= ID (*) EQUAL expr , {EOLN }]
}
transition on EQUAL to state [24]

-------------------
lalr_state [3]: {
  [list ::= list instr (*) EOLN , {EOF PLUS MINUS LPAREN NUMBER ID }]
}
transition on EOLN to state [23]

-------------------
lalr_state [4]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= PLUS (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [22]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [5]: {
  [expr ::= NUMBER (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}

-------------------
lalr_state [6]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= MINUS (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [21]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [7]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [instr ::= expr (*) , {EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [8]: {
  [expr ::= LPAREN (*) expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [11]
transition on LPAREN to state [8]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [9]: {
  [$START ::= list EOF (*) , {EOF }]
}

-------------------
lalr_state [10]: {
  [expr ::= ID (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}

-------------------
lalr_state [11]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= LPAREN expr (*) RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]
transition on RPAREN to state [12]

-------------------
lalr_state [12]: {
  [expr ::= LPAREN expr RPAREN (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}

-------------------
lalr_state [13]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr PLUS (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [20]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [14]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr MINUS (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [19]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [15]: {
  [expr ::= expr DIVIDE (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on expr to state [18]
transition on LPAREN to state [8]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [16]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr TIMES (*) expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [17]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [17]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr TIMES expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [18]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr DIVIDE expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [19]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr MINUS expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [20]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr PLUS expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [21]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= MINUS expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [22]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= PLUS expr (*) , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [23]: {
  [list ::= list instr EOLN (*) , {EOF PLUS MINUS LPAREN NUMBER ID }]
}

-------------------
lalr_state [24]: {
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) ID , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [instr ::= ID EQUAL (*) expr , {EOLN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
}
transition on LPAREN to state [8]
transition on expr to state [25]
transition on MINUS to state [6]
transition on NUMBER to state [5]
transition on PLUS to state [4]
transition on ID to state [10]

-------------------
lalr_state [25]: {
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [instr ::= ID EQUAL expr (*) , {EOLN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE EOLN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE EOLN }]
}
transition on TIMES to state [16]
transition on DIVIDE to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 0:REDUCE(with prod 0)] [term 3:REDUCE(with prod 0)]
 [term 4:REDUCE(with prod 0)] [term 7:REDUCE(with prod 0)]
 [term 10:REDUCE(with prod 0)] [term 11:REDUCE(with prod 0)]
From state #1
 [term 0:SHIFT(to state 9)] [term 3:SHIFT(to state 4)]
 [term 4:SHIFT(to state 6)] [term 7:SHIFT(to state 8)]
 [term 10:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #2
 [term 2:SHIFT(to state 24)] [term 3:REDUCE(with prod 13)]
 [term 4:REDUCE(with prod 13)] [term 5:REDUCE(with prod 13)]
 [term 6:REDUCE(with prod 13)] [term 9:REDUCE(with prod 13)]
From state #3
 [term 9:SHIFT(to state 23)]
From state #4
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #5
 [term 3:REDUCE(with prod 12)] [term 4:REDUCE(with prod 12)]
 [term 5:REDUCE(with prod 12)] [term 6:REDUCE(with prod 12)]
 [term 8:REDUCE(with prod 12)] [term 9:REDUCE(with prod 12)]
From state #6
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #7
 [term 3:SHIFT(to state 13)] [term 4:SHIFT(to state 14)]
 [term 5:SHIFT(to state 16)] [term 6:SHIFT(to state 15)]
 [term 9:REDUCE(with prod 4)]
From state #8
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #9
 [term 0:REDUCE(with prod 1)]
From state #10
 [term 3:REDUCE(with prod 13)] [term 4:REDUCE(with prod 13)]
 [term 5:REDUCE(with prod 13)] [term 6:REDUCE(with prod 13)]
 [term 8:REDUCE(with prod 13)] [term 9:REDUCE(with prod 13)]
From state #11
 [term 3:SHIFT(to state 13)] [term 4:SHIFT(to state 14)]
 [term 5:SHIFT(to state 16)] [term 6:SHIFT(to state 15)]
 [term 8:SHIFT(to state 12)]
From state #12
 [term 3:REDUCE(with prod 11)] [term 4:REDUCE(with prod 11)]
 [term 5:REDUCE(with prod 11)] [term 6:REDUCE(with prod 11)]
 [term 8:REDUCE(with prod 11)] [term 9:REDUCE(with prod 11)]
From state #13
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #14
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #15
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #16
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #17
 [term 3:REDUCE(with prod 7)] [term 4:REDUCE(with prod 7)]
 [term 5:REDUCE(with prod 7)] [term 6:REDUCE(with prod 7)]
 [term 8:REDUCE(with prod 7)] [term 9:REDUCE(with prod 7)]
From state #18
 [term 3:REDUCE(with prod 8)] [term 4:REDUCE(with prod 8)]
 [term 5:REDUCE(with prod 8)] [term 6:REDUCE(with prod 8)]
 [term 8:REDUCE(with prod 8)] [term 9:REDUCE(with prod 8)]
From state #19
 [term 3:REDUCE(with prod 6)] [term 4:REDUCE(with prod 6)]
 [term 5:SHIFT(to state 16)] [term 6:SHIFT(to state 15)]
 [term 8:REDUCE(with prod 6)] [term 9:REDUCE(with prod 6)]
From state #20
 [term 3:REDUCE(with prod 5)] [term 4:REDUCE(with prod 5)]
 [term 5:SHIFT(to state 16)] [term 6:SHIFT(to state 15)]
 [term 8:REDUCE(with prod 5)] [term 9:REDUCE(with prod 5)]
From state #21
 [term 3:REDUCE(with prod 9)] [term 4:REDUCE(with prod 9)]
 [term 5:REDUCE(with prod 9)] [term 6:REDUCE(with prod 9)]
 [term 8:REDUCE(with prod 9)] [term 9:REDUCE(with prod 9)]
From state #22
 [term 3:REDUCE(with prod 10)] [term 4:REDUCE(with prod 10)]
 [term 5:REDUCE(with prod 10)] [term 6:REDUCE(with prod 10)]
 [term 8:REDUCE(with prod 10)] [term 9:REDUCE(with prod 10)]
From state #23
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
 [term 4:REDUCE(with prod 2)] [term 7:REDUCE(with prod 2)]
 [term 10:REDUCE(with prod 2)] [term 11:REDUCE(with prod 2)]
From state #24
 [term 3:SHIFT(to state 4)] [term 4:SHIFT(to state 6)]
 [term 7:SHIFT(to state 8)] [term 10:SHIFT(to state 5)]
 [term 11:SHIFT(to state 10)]
From state #25
 [term 3:SHIFT(to state 13)] [term 4:SHIFT(to state 14)]
 [term 5:SHIFT(to state 16)] [term 6:SHIFT(to state 15)]
 [term 9:REDUCE(with prod 3)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1]
From state #1
 [non term 1->state 3] [non term 2->state 7]
From state #2
From state #3
From state #4
 [non term 2->state 22]
From state #5
From state #6
 [non term 2->state 21]
From state #7
From state #8
 [non term 2->state 11]
From state #9
From state #10
From state #11
From state #12
From state #13
 [non term 2->state 20]
From state #14
 [non term 2->state 19]
From state #15
 [non term 2->state 18]
From state #16
 [non term 2->state 17]
From state #17
From state #18
From state #19
From state #20
From state #21
From state #22
From state #23
From state #24
 [non term 2->state 25]
From state #25
-----------------------------
